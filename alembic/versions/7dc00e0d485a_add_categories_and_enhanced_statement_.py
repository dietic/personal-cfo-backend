"""add_categories_and_enhanced_statement_processing

Revision ID: 7dc00e0d485a
Revises: 3cf846d614cf
Create Date: 2025-06-08 20:02:19.315389

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = '7dc00e0d485a'
down_revision: Union[str, None] = '3cf846d614cf'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    
    # Create categories table
    op.create_table('categories',
        sa.Column('id', sa.String(), nullable=False),
        sa.Column('user_id', sa.String(), nullable=False),
        sa.Column('name', sa.String(), nullable=False),
        sa.Column('color', sa.String(), nullable=True),
        sa.Column('keywords', sa.Text(), nullable=True),
        sa.Column('is_default', sa.Boolean(), nullable=True),
        sa.Column('is_active', sa.Boolean(), nullable=True),
        sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.func.now(), nullable=True),
        sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
        sa.PrimaryKeyConstraint('id'),
        sa.ForeignKeyConstraint(['user_id'], ['users.id'], )
    )
    
    # Add enhanced statement processing columns
    op.add_column('statements', sa.Column('extraction_status', sa.String(), nullable=True))
    op.add_column('statements', sa.Column('categorization_status', sa.String(), nullable=True))
    op.add_column('statements', sa.Column('retry_count', sa.String(), nullable=True))
    # Note: error_message column already exists, skipping
    
    # Set default values for new columns
    op.execute("UPDATE statements SET extraction_status = 'pending', categorization_status = 'pending', retry_count = '{\"extraction\": 0, \"categorization\": 0}' WHERE extraction_status IS NULL")
    
    # Drop old async processing columns if they exist
    try:
        op.drop_column('statements', 'processing_started_at')
    except:
        pass
    try:
        op.drop_column('statements', 'processing_completed_at')
    except:
        pass
    
    # Drop statement_id from transactions if it exists
    try:
        op.drop_constraint('fk_transactions_statement_id', 'transactions', type_='foreignkey')
        op.drop_column('transactions', 'statement_id')
    except:
        pass
    
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    
    # Add back old columns
    try:
        op.add_column('transactions', sa.Column('statement_id', sa.VARCHAR(), nullable=True))
        op.create_foreign_key('fk_transactions_statement_id', 'transactions', 'statements', ['statement_id'], ['id'])
    except:
        pass
    
    try:
        op.add_column('statements', sa.Column('processing_completed_at', sa.DATETIME(), nullable=True))
        op.add_column('statements', sa.Column('processing_started_at', sa.DATETIME(), nullable=True))
    except:
        pass
    
    # Drop new columns
    op.drop_column('statements', 'retry_count')
    op.drop_column('statements', 'categorization_status')
    op.drop_column('statements', 'extraction_status')
    # Note: error_message column was already present, keeping it
    
    # Drop categories table
    op.drop_table('categories')
    
    # ### end Alembic commands ###
