"""clean_schema_baseline

Clean migration baseline representing current schema state.
All previous migrations have been consolidated into this single revision.

Revision ID: clean_baseline_001
Revises:
Create Date: 2025-09-17 21:30:00.000000

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql
from app.core.types import GUID

# revision identifiers, used by Alembic.
revision: str = 'clean_baseline_001'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###

    # Create enums for PostgreSQL
    bind = op.get_bind()
    dialect = bind.dialect.name

    if dialect == "postgresql":
        op.execute("""
            DO $$ BEGIN
                IF NOT EXISTS (SELECT 1 FROM pg_type WHERE typname = 'currencyenum') THEN
                    CREATE TYPE currencyenum AS ENUM ('USD','PEN','EUR','GBP');
                END IF;
            END $$;
            """)
        op.execute("""
            DO $$ BEGIN
                IF NOT EXISTS (SELECT 1 FROM pg_type WHERE typname = 'timezoneenum') THEN
                    CREATE TYPE timezoneenum AS ENUM (
                        'UTC-8 (Pacific Time)',
                        'UTC-7 (Mountain Time)',
                        'UTC-6 (Central Time)',
                        'UTC-5 (Eastern Time)',
                        'UTC-3 (Argentina Time)',
                        'UTC+0 (London Time)',
                        'UTC+1 (Central European Time)'
                    );
                END IF;
            END $$;
            """)
        op.execute("""
            DO $$ BEGIN
                IF NOT EXISTS (SELECT 1 FROM pg_type WHERE typname = 'alerttype') THEN
                    CREATE TYPE alerttype AS ENUM (
                        'spending_limit',
                        'merchant_watch',
                        'category_budget',
                        'unusual_spending',
                        'large_transaction',
                        'new_merchant',
                        'budget_exceeded'
                    );
                END IF;
            END $$;
            """)
        op.execute("""
            DO $$ BEGIN
                IF NOT EXISTS (SELECT 1 FROM pg_type WHERE typname = 'alertseverity') THEN
                    CREATE TYPE alertseverity AS ENUM ('low','medium','high');
                END IF;
            END $$;
            """)
        op.execute("""
            DO $$ BEGIN
                IF NOT EXISTS (SELECT 1 FROM pg_type WHERE typname = 'usertypeenum') THEN
                    CREATE TYPE usertypeenum AS ENUM ('free','plus','pro');
                END IF;
            END $$;
            """)

    # users table
    op.create_table('users',
        sa.Column('id', GUID(), nullable=False),
        sa.Column('email', sa.String(), nullable=False),
        sa.Column('password_hash', sa.String(), nullable=False),
        sa.Column('is_active', sa.Boolean(), nullable=True, server_default='false'),
        sa.Column('is_admin', sa.Boolean(), nullable=True, server_default='false'),
        sa.Column('first_name', sa.String(), nullable=True),
        sa.Column('last_name', sa.String(), nullable=True),
        sa.Column('phone_number', sa.String(), nullable=True),
        sa.Column('profile_picture_url', sa.String(), nullable=True),
        sa.Column('preferred_currency', sa.String(length=3), nullable=True),
        sa.Column('timezone', sa.String(), nullable=True),
        sa.Column('budget_alerts_enabled', sa.Boolean(), nullable=True, server_default='true'),
        sa.Column('payment_reminders_enabled', sa.Boolean(), nullable=True, server_default='true'),
        sa.Column('transaction_alerts_enabled', sa.Boolean(), nullable=True, server_default='false'),
        sa.Column('weekly_summary_enabled', sa.Boolean(), nullable=True, server_default='true'),
        sa.Column('monthly_reports_enabled', sa.Boolean(), nullable=True, server_default='true'),
        sa.Column('email_notifications_enabled', sa.Boolean(), nullable=True, server_default='true'),
        sa.Column('push_notifications_enabled', sa.Boolean(), nullable=True, server_default='false'),
        sa.Column('otp_code', sa.String(), nullable=True),
        sa.Column('otp_expires_at', sa.DateTime(timezone=True), nullable=True),
        sa.Column('otp_attempts', sa.Integer(), nullable=True, server_default='0'),
        sa.Column('otp_last_sent_at', sa.DateTime(timezone=True), nullable=True),
        sa.Column('plan_tier', sa.String(), nullable=True, server_default='free'),
        sa.Column('plan_status', sa.String(), nullable=False, server_default='inactive'),
        sa.Column('billing_currency', sa.String(), nullable=False, server_default='PEN'),
        sa.Column('current_period_end', sa.DateTime(timezone=True), nullable=True),
        sa.Column('cancel_at_period_end', sa.Boolean(), nullable=True, server_default='false'),
        sa.Column('provider_customer_id', sa.String(), nullable=True),
        sa.Column('provider_subscription_id', sa.String(), nullable=True),
        sa.Column('last_payment_status', sa.String(), nullable=True),
        sa.Column('ai_keyword_usage_count', sa.Integer(), nullable=False, server_default='0'),
        sa.Column('ai_keyword_last_used', sa.DateTime(timezone=True), nullable=True),
        sa.Column('ai_keyword_reset_at', sa.DateTime(timezone=True), nullable=True),
        sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
        sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
        sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_users_email'), 'users', ['email'], unique=True)

    # bank_providers table
    op.create_table('bank_providers',
        sa.Column('id', GUID(), nullable=False),
        sa.Column('name', sa.String(), nullable=False),
        sa.Column('short_name', sa.String(), nullable=True),
        sa.Column('country', sa.String(), nullable=False),
        sa.Column('country_name', sa.String(), nullable=False),
        sa.Column('logo_url', sa.String(), nullable=True),
        sa.Column('website', sa.String(), nullable=True),
        sa.Column('color_primary', sa.String(), nullable=True),
        sa.Column('color_secondary', sa.String(), nullable=True),
        sa.Column('is_active', sa.Boolean(), nullable=True, server_default='true'),
        sa.Column('is_popular', sa.Boolean(), nullable=True, server_default='false'),
        sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
        sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
        sa.PrimaryKeyConstraint('id'),
        sa.UniqueConstraint('name')
    )

    # cards table
    op.create_table('cards',
        sa.Column('id', GUID(), nullable=False),
        sa.Column('user_id', GUID(), nullable=False),
        sa.Column('card_name', sa.String(), nullable=False),
        sa.Column('payment_due_date', sa.Date(), nullable=True),
        sa.Column('bank_provider_id', GUID(), nullable=True),
        sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
        sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
        sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
        sa.ForeignKeyConstraint(['bank_provider_id'], ['bank_providers.id'], ),
        sa.PrimaryKeyConstraint('id')
    )

    # statements table
    op.create_table('statements',
        sa.Column('id', GUID(), nullable=False),
        sa.Column('user_id', GUID(), nullable=False),
        sa.Column('card_id', GUID(), nullable=False),
        sa.Column('filename', sa.String(), nullable=False),
        sa.Column('file_path', sa.String(), nullable=False),
        sa.Column('file_type', sa.String(), nullable=False),
        sa.Column('statement_month', sa.Date(), nullable=True),
        sa.Column('status', sa.String(), nullable=True),
        sa.Column('task_id', sa.String(), nullable=True),
        sa.Column('processing_message', sa.String(), nullable=True),
        sa.Column('transactions_count', sa.Integer(), nullable=True),
        sa.Column('extraction_method', sa.String(), nullable=True),
        sa.Column('extraction_status', sa.String(), nullable=True),
        sa.Column('categorization_status', sa.String(), nullable=True),
        sa.Column('extraction_retries', sa.Integer(), nullable=True),
        sa.Column('categorization_retries', sa.Integer(), nullable=True),
        sa.Column('max_retries', sa.Integer(), nullable=True),
        sa.Column('processed_transactions', sa.Text(), nullable=True),
        sa.Column('ai_insights', sa.Text(), nullable=True),
        sa.Column('error_message', sa.Text(), nullable=True),
        sa.Column('is_processed', sa.Boolean(), nullable=True),
        sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
        sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
        sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
        sa.ForeignKeyConstraint(['card_id'], ['cards.id'], ),
        sa.PrimaryKeyConstraint('id')
    )

    # transactions table
    op.create_table('transactions',
        sa.Column('id', GUID(), nullable=False),
        sa.Column('card_id', GUID(), nullable=False),
        sa.Column('statement_id', GUID(), nullable=True),
        sa.Column('merchant', sa.String(), nullable=False),
        sa.Column('amount', sa.Numeric(precision=10, scale=2), nullable=False),
        sa.Column('currency', sa.String(length=3), nullable=False),
        sa.Column('category', sa.String(), nullable=True),
        sa.Column('transaction_date', sa.Date(), nullable=False),
        sa.Column('tags', sa.String(), nullable=True),
        sa.Column('description', sa.String(), nullable=True),
        sa.Column('ai_confidence', sa.Numeric(precision=3, scale=2), nullable=True),
        sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
        sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
        sa.ForeignKeyConstraint(['card_id'], ['cards.id'], ),
        sa.ForeignKeyConstraint(['statement_id'], ['statements.id'], ),
        sa.PrimaryKeyConstraint('id')
    )

    # categories table
    op.create_table('categories',
        sa.Column('id', GUID(), nullable=False),
        sa.Column('user_id', GUID(), nullable=True),
        sa.Column('name', sa.String(), nullable=False),
        sa.Column('color', sa.String(), nullable=True),
        sa.Column('emoji', sa.String(), nullable=True),
        sa.Column('ai_seeded_at', sa.DateTime(timezone=True), nullable=True),
        sa.Column('is_default', sa.Boolean(), nullable=True, server_default='false'),
        sa.Column('is_system', sa.Boolean(), nullable=True, server_default='false'),
        sa.Column('is_active', sa.Boolean(), nullable=True, server_default='true'),
        sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
        sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
        sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
        sa.PrimaryKeyConstraint('id')
    )

    # category_keywords table
    op.create_table('category_keywords',
        sa.Column('id', GUID(), nullable=False),
        sa.Column('user_id', GUID(), nullable=False),
        sa.Column('category_id', GUID(), nullable=False),
        sa.Column('keyword', sa.String(length=255), nullable=False),
        sa.Column('description', sa.Text(), nullable=True),
        sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
        sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
        sa.ForeignKeyConstraint(['category_id'], ['categories.id'], ),
        sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
        sa.PrimaryKeyConstraint('id')
    )

    # alerts table
    op.create_table('alerts',
        sa.Column('id', GUID(), nullable=False),
        sa.Column('user_id', GUID(), nullable=False),
        sa.Column('statement_id', GUID(), nullable=True),
        sa.Column('alert_type', sa.String(), nullable=False),
        sa.Column('severity', sa.String(), nullable=False),
        sa.Column('title', sa.String(), nullable=False),
        sa.Column('message', sa.Text(), nullable=False),
        sa.Column('is_read', sa.Boolean(), nullable=True, server_default='false'),
        sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
        sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
        sa.ForeignKeyConstraint(['statement_id'], ['statements.id'], ),
        sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
        sa.PrimaryKeyConstraint('id')
    )

    # incomes table
    op.create_table('incomes',
        sa.Column('id', GUID(), nullable=False),
        sa.Column('user_id', GUID(), nullable=False),
        sa.Column('card_id', GUID(), nullable=False),
        sa.Column('amount', sa.Numeric(precision=10, scale=2), nullable=False),
        sa.Column('currency', sa.String(length=3), nullable=False),
        sa.Column('description', sa.String(), nullable=False),
        sa.Column('income_date', sa.Date(), nullable=False),
        sa.Column('last_processed_date', sa.Date(), nullable=True),
        sa.Column('source', sa.String(), nullable=True),
        sa.Column('is_recurring', sa.Boolean(), nullable=True, server_default='false'),
        sa.Column('recurring_day', sa.Integer(), nullable=True),
        sa.Column('category', sa.String(), nullable=True),
        sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
        sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
        sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
        sa.ForeignKeyConstraint(['card_id'], ['cards.id'], ),
        sa.PrimaryKeyConstraint('id')
    )

    # merchants table
    op.create_table('merchants',
        sa.Column('id', GUID(), nullable=False),
        sa.Column('user_id', GUID(), nullable=False),
        sa.Column('canonical_name', sa.String(), nullable=False),
        sa.Column('display_name', sa.String(), nullable=False),
        sa.Column('description_patterns', sa.String(), nullable=True),
        sa.Column('category', sa.String(), nullable=True),
        sa.Column('transaction_count', sa.String(), server_default='0', nullable=True),
        sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
        sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
        sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
        sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_merchants_user_id'), 'merchants', ['user_id'], unique=False)

    # Additional tables that exist in the database
    op.create_table('budgets',
        sa.Column('id', GUID(), nullable=False),
        sa.Column('user_id', GUID(), nullable=False),
        sa.Column('category', sa.String(), nullable=False),
        sa.Column('amount', sa.Numeric(precision=10, scale=2), nullable=False),
        sa.Column('currency', sa.String(length=3), nullable=False),
        sa.Column('period', sa.String(), nullable=False),
        sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
        sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
        sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
        sa.PrimaryKeyConstraint('id')
    )

    op.create_table('recurring_services',
        sa.Column('id', GUID(), nullable=False),
        sa.Column('user_id', GUID(), nullable=False),
        sa.Column('name', sa.String(), nullable=False),
        sa.Column('amount', sa.Numeric(precision=10, scale=2), nullable=False),
        sa.Column('currency', sa.String(length=3), nullable=False),
        sa.Column('frequency', sa.String(), nullable=False),
        sa.Column('next_payment_date', sa.Date(), nullable=False),
        sa.Column('category', sa.String(), nullable=True),
        sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
        sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
        sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
        sa.PrimaryKeyConstraint('id')
    )

    op.create_table('user_excluded_keywords',
        sa.Column('id', GUID(), nullable=False),
        sa.Column('user_id', GUID(), nullable=False),
        sa.Column('keyword', sa.String(length=255), nullable=False),
        sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
        sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
        sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
        sa.PrimaryKeyConstraint('id')
    )

    op.create_table('user_keyword_rules',
        sa.Column('id', GUID(), nullable=False),
        sa.Column('user_id', GUID(), nullable=False),
        sa.Column('keyword', sa.String(length=255), nullable=False),
        sa.Column('category', sa.String(), nullable=False),
        sa.Column('is_active', sa.Boolean(), nullable=True, server_default='true'),
        sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
        sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
        sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
        sa.PrimaryKeyConstraint('id')
    )

    # Convert enum columns for PostgreSQL
    if dialect == "postgresql":
        op.execute("ALTER TABLE users ALTER COLUMN preferred_currency TYPE currencyenum USING preferred_currency::currencyenum")
        op.execute("ALTER TABLE users ALTER COLUMN timezone TYPE timezoneenum USING timezone::timezoneenum")
        op.execute("ALTER TABLE users ALTER COLUMN plan_tier DROP DEFAULT")
        op.execute("ALTER TABLE users ALTER COLUMN plan_tier TYPE usertypeenum USING plan_tier::usertypeenum")
        op.execute("ALTER TABLE users ALTER COLUMN plan_tier SET DEFAULT 'free'::usertypeenum")
        op.execute("ALTER TABLE alerts ALTER COLUMN alert_type TYPE alerttype USING alert_type::alerttype")
        op.execute("ALTER TABLE alerts ALTER COLUMN severity TYPE alertseverity USING severity::alertseverity")

    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###

    # Drop tables in reverse order of dependencies
    op.drop_table('user_keyword_rules')
    op.drop_table('user_excluded_keywords')
    op.drop_table('recurring_services')
    op.drop_table('budgets')
    op.drop_index(op.f('ix_merchants_user_id'), table_name='merchants')
    op.drop_table('merchants')
    op.drop_table('incomes')
    op.drop_table('alerts')
    op.drop_table('category_keywords')
    op.drop_table('categories')
    op.drop_table('transactions')
    op.drop_table('statements')
    op.drop_table('cards')
    op.drop_table('bank_providers')
    op.drop_index(op.f('ix_users_email'), table_name='users')
    op.drop_table('users')

    # Drop enums for PostgreSQL
    bind = op.get_bind()
    dialect = bind.dialect.name
    if dialect == "postgresql":
        op.execute("DROP TYPE IF EXISTS alertseverity CASCADE;")
        op.execute("DROP TYPE IF EXISTS alerttype CASCADE;")
        op.execute("DROP TYPE IF EXISTS usertypeenum CASCADE;")
        op.execute("DROP TYPE IF EXISTS timezoneenum CASCADE;")
        op.execute("DROP TYPE IF EXISTS currencyenum CASCADE;")

    # ### end Alembic commands ###